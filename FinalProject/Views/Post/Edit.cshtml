@using System.Collections.ObjectModel
@using FinalProject.Models
@model PostEditViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <p>Enter in your post title and blog content. You may also use the Budget Box interface to add a Budget Box!</p>
        <p>
            The Budget Box interface takes in a box title and starting amount. Then you may start adding in transactions
            to your box!
        </p>
        <p>
            Each transaction has a description, price per unit, and quantity. Be sure to enter a value for each item!
        </p>
        <p>
            Do not enter numbers with commas.
        </p>
        <hr />
        @Html.HiddenFor(model => model.CreationDate)
        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model => model.Id)
        <div class="col-md-9">
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })<br>
                        @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.StartingAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StartingAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StartingAmount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 budget-box-editor">
            <div class="transaction-editor" id="transaction-editor">
                @{
                    if (Model.Transactions == null)
                    {
                        Model.Transactions = new Collection<Transaction>();
                    }
                }
                <fieldset>
                    @if (Model.Transactions.Count > 0)
                    {
                        foreach (var box in Model.Transactions)
                        {
                            @Html.Partial("_TransactionEditor", box)
                        }
                    }
                    else
                    {
                        @Html.Partial("_TransactionEditor", new Transaction())
                    }
                </fieldset>
            </div>
            @Html.ActionLink("Add another Transaction", "BlankTransactionEditor", "Post", null, new { id = "addTransaction" })
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

        var objects = [];

        function checkObjects()
        {
            var all = $("a.deleteTrans");
            for (var i = 0; i < all.length; i++)
            {
                if (objects.indexOf(all[i]) == -1)
                {
                    $(all[i]).on("click", function ()
                    {
                        $(this).parents("div.transaction-editor-row:first").remove();
                        return false;
                    });
                    objects.push(all[i]);
                }
            }
        }

        $(document).ready(function ()
        {
            setInterval(checkObjects, 500);

            $("#addTransaction").on("click", function ()
            {
                $.ajax({
                    url: this.href,
                    cache: false,
                    success: function (html) { $("#transaction-editor").append(html); }
                });
                return false;
            });
        });
    </script>

}
